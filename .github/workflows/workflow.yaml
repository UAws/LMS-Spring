name: LMS CI Test

on: [push, pull_request]

jobs:

  test:
    name: Unit-Test
    runs-on: ubuntu-20.04
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: user
          MYSQL_PASSWORD: 123456
          MYSQL_DATABASE: LMS
          MYSQL_ROOT_PASSWORD: 123456
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3


    steps:
      - uses: actions/checkout@v2
      - name: Verify MariaDB connection
        env:
          PORT: ${{ job.services.mariadb.ports[3306] }}
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
            sleep 1
          done

      - name: Create Mock Database structure And import Mock Data
        env:
          PORT: ${{ job.services.mariadb.ports[3306] }}
        run: mysql -uroot -p123456 -h"127.0.0.1" -P"$PORT" LMS < Script/Sql/mock_db.sql

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          java-package: jdk

      # Step that does that actual cache save and restore
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven Package
        env:
          # Spring Boot property
          DB_PORT: ${{ job.services.mariadb.ports[3306] }}
        run: mvn -B clean package
      - name: Maven Verify
        run: mvn -B clean verify -DskipTests

      - name: Upload a Jar
        uses: actions/upload-artifact@v2
        with:
          name: lms-spring.jar
          path: target/*.jar



  docker:
    name: Publish Docker Image
    runs-on: ubuntu-20.04
    needs: [ test ]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
    steps:
      - uses: actions/checkout@v1
      - name: Docker Hub Sign-in
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Building Docker Image
        run: |
          docker build -t $REPO:latest -t $REPO:$GITHUB_RUN_ID .
          echo $GITHUB_RUN_ID
      - name: Publish Docker Image
        run: |
          docker push $REPO:latest
          docker push $REPO:$GITHUB_RUN_ID

